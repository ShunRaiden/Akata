//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/PlayerS/PlayerSInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerSInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerSInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerSInput"",
    ""maps"": [
        {
            ""name"": ""PlayerS_Movement"",
            ""id"": ""c8b987d2-91e5-4f1b-9193-fb9e8d4937c7"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b0ad8b6f-487b-4f9e-8d1c-44e71e7c336c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""71302029-2f97-4c89-a8eb-d4c0f5dcf78d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""PassThrough"",
                    ""id"": ""89ddb59b-ef07-484d-96cf-7fd41609dae2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""PassThrough"",
                    ""id"": ""927defea-9554-4f50-acad-bcc3f09b0af8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""647d2dec-a006-4229-ba54-4b76e63b3a7c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6d859610-5651-42d3-8f0c-b7fefa6ac2a8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""80f55ab0-f09c-401e-a814-36fe88686c41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""afa18c39-3f7b-4174-805e-549e376b69d7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d873edf0-4077-4e16-a7e0-f84d6e2642e6"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f55d32d2-d5f4-4174-9102-6268e1a267d0"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""455fa2a3-4866-4731-bd18-df9abe001122"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a0da0a5-c934-4748-9799-1c1079592ed4"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65429481-df4f-47e2-9a9c-a06a6a22877c"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player3rd Movement"",
            ""id"": ""225e1e64-a8a2-40bd-9c2d-e9d9217aaf23"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1c6803f5-14e6-4380-847e-0a02a60ffb3f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0d5dce8c-f62a-4d12-902e-e48d366b1628"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f28a7aee-3dca-4fdb-9622-f1830afdb144"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""af9a61d0-7efc-4951-bcdc-3a30625ae76d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f1d7bcfc-273d-433f-b465-2965133ae639"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c7dd9654-e8b8-422a-90c4-45ba57cc32b2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""2aac83e1-52da-4e31-b8af-e7bbaafa37ca"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""be1fc6e7-0539-4fdd-a8d1-edce82013fcc"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8839b589-7c2d-4ac5-940c-c283c3886f2f"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3f5d13e5-f5fb-4a9c-83a8-0991c20e24a3"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4eab6726-576e-4e25-a3fa-4bb883078436"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerS_Movement
        m_PlayerS_Movement = asset.FindActionMap("PlayerS_Movement", throwIfNotFound: true);
        m_PlayerS_Movement_Movement = m_PlayerS_Movement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerS_Movement_Jump = m_PlayerS_Movement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerS_Movement_Dash = m_PlayerS_Movement.FindAction("Dash", throwIfNotFound: true);
        m_PlayerS_Movement_Attack = m_PlayerS_Movement.FindAction("Attack", throwIfNotFound: true);
        // Player3rd Movement
        m_Player3rdMovement = asset.FindActionMap("Player3rd Movement", throwIfNotFound: true);
        m_Player3rdMovement_Movement = m_Player3rdMovement.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerS_Movement
    private readonly InputActionMap m_PlayerS_Movement;
    private List<IPlayerS_MovementActions> m_PlayerS_MovementActionsCallbackInterfaces = new List<IPlayerS_MovementActions>();
    private readonly InputAction m_PlayerS_Movement_Movement;
    private readonly InputAction m_PlayerS_Movement_Jump;
    private readonly InputAction m_PlayerS_Movement_Dash;
    private readonly InputAction m_PlayerS_Movement_Attack;
    public struct PlayerS_MovementActions
    {
        private @PlayerSInput m_Wrapper;
        public PlayerS_MovementActions(@PlayerSInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerS_Movement_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerS_Movement_Jump;
        public InputAction @Dash => m_Wrapper.m_PlayerS_Movement_Dash;
        public InputAction @Attack => m_Wrapper.m_PlayerS_Movement_Attack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerS_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerS_MovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerS_MovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerS_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerS_MovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IPlayerS_MovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IPlayerS_MovementActions instance)
        {
            if (m_Wrapper.m_PlayerS_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerS_MovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerS_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerS_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerS_MovementActions @PlayerS_Movement => new PlayerS_MovementActions(this);

    // Player3rd Movement
    private readonly InputActionMap m_Player3rdMovement;
    private List<IPlayer3rdMovementActions> m_Player3rdMovementActionsCallbackInterfaces = new List<IPlayer3rdMovementActions>();
    private readonly InputAction m_Player3rdMovement_Movement;
    public struct Player3rdMovementActions
    {
        private @PlayerSInput m_Wrapper;
        public Player3rdMovementActions(@PlayerSInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player3rdMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Player3rdMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player3rdMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer3rdMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_Player3rdMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player3rdMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayer3rdMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayer3rdMovementActions instance)
        {
            if (m_Wrapper.m_Player3rdMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer3rdMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_Player3rdMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player3rdMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player3rdMovementActions @Player3rdMovement => new Player3rdMovementActions(this);
    public interface IPlayerS_MovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IPlayer3rdMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
